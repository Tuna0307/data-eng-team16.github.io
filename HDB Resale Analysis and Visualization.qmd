---
title: "HDB Resale Trends: Analysis and Enhanced Visualization"
author: "Team 16"
format: 
  html:
    toc: true
    toc-depth: 3
    theme: cosmo
editor: visual
---

## Introduction

This document validates our cleaned data against the original Straits Times article, reconstructs the article's visualizations, and presents three new, improved charts to uncover deeper insights into the HDB resale market from 2020-2024.

------------------------------------------------------------------------

### **1. Setup and Load Cleaned Data**

This first step loads the necessary libraries and reads the clean CSV files that were created by our `data_cleaning.qmd` script.

```{r setup, message=FALSE, warning=FALSE}
# --- 1. Setup and Load All Data ---

# List of required packages for analysis and visualization
packages <- c("tidyverse", "lubridate", "scales", "forcats", "ggridges", "plotly", "sf","patchwork")

# Loop through each package
for (pkg in packages) {
  # Install the package if it's not already installed
  if (!require(pkg, character.only = TRUE)) {
    install.packages(pkg)
  }
  # Load the package
  library(pkg, character.only = TRUE)
}

# Set global options for cleaner output
options(scipen = 999)
options(dplyr.summarise.inform = FALSE)

# --- Load the CLEAN datasets from the previous script ---
# Make sure these files are in a "data_output" subfolder.
project_data <- read_csv("data_output/cleaned_hdb_resale_data.csv")
percentage_change <- read_csv("data_output/percentage_change_analysis.csv")

# Confirm that data is loaded
cat("Clean data loaded successfully. project_data has", nrow(project_data), "rows.\n")
```

------------------------------------------------------------------------

### **2. Validation Against News Article**

We first check if our data matches the key statistics cited in the article. This confirms the quality of our data preparation.

```{r validation_against_article, message=FALSE, warning=FALSE}
# --- Validation 1: Transaction Counts (Jan-Nov) ---
transaction_validation <- project_data %>%
  filter(month(month) <= 11) %>%
  filter(flat_type == "2 ROOM", year %in% c(2020, 2024)) %>%
  group_by(year) %>%
  summarise(transaction_count = n())

print("Validation - 2-Room Transaction Counts (Jan-Nov):")
print(transaction_validation)
cat("Article cited 388 (2020) and 740 (2024).\n\n")


# --- Validation 2 & 3: Median Prices (Q4) ---
price_validation <- project_data %>%
  filter(quarter(month, with_year = FALSE) == 4) %>%
  filter(flat_type %in% c("2 ROOM", "3 ROOM"), year %in% c(2020, 2024)) %>%
  group_by(flat_type, year) %>%
  summarise(median_price = median(resale_price, na.rm = TRUE)) %>%
  arrange(flat_type, year)

print("Validation - Median Prices in Q4:")
print(price_validation)
cat("Article cited $238k/$353k for 2-room and $308k/$430k for 3-room.\n")
```

------------------------------------------------------------------------

### **3. Reconstruct Original Visualizations**

Using our validated data, we recreate the two simple bar charts from the news article for direct comparison.

#### **Chart 1: Percentage Change in Transactions**

```{r recreate_chart1, message=FALSE, warning=FALSE}
ggplot(percentage_change, 
       aes(x = percentage_change, 
           y = fct_reorder(flat_type_label, percentage_change))) +
  geom_col(aes(fill = percentage_change > 0), show.legend = FALSE) +
  geom_text(aes(label = paste0(percentage_change, "%")), hjust = -0.15, size = 3.5, color = "black") +
  scale_fill_manual(values = c("TRUE" = "#5D9CEC", "FALSE" = "#D9D9D9")) +
  scale_x_continuous(limits = c(-30, 100), breaks = seq(-30, 90, 10)) +
  labs(
    title = "Recreation: Percentage Change in HDB Transactions",
    subtitle = "From 2020 to 2024, based on our prepared data",
    x = NULL, y = NULL, caption = "Source: Team 16 Analysis of data.gov.sg"
  ) +
  theme_minimal(base_size = 14) +
  theme(panel.grid.major.y = element_blank(), panel.grid.minor.x = element_blank(), plot.title.position = "plot")
```

#### **Chart 2: Percentage Change in Resale Price**

```{r recreate_chart2, message=FALSE, warning=FALSE}
# Prepare data for the price change chart
price_change_summary <- project_data %>%
  filter(year %in% c(2020, 2024)) %>%
  group_by(flat_type, year) %>%
  summarise(median_price = median(resale_price, na.rm = TRUE), .groups = "drop") %>%
  complete(flat_type, year = c(2020, 2024), fill = list(median_price = 0)) %>%
  pivot_wider(names_from = year, values_from = median_price, names_prefix = "year_") %>%
  mutate(
    price_change_pct = if_else(year_2020 > 0, round(((year_2024 - year_2020) / year_2020) * 100, 1), NA_real_),
    flat_type_label = str_replace(flat_type, " ROOM", "-room") %>% str_to_title()
  ) %>%
  filter(!is.na(price_change_pct))

# Recreate the price change chart
ggplot(price_change_summary, 
       aes(x = price_change_pct, 
           y = fct_reorder(flat_type_label, price_change_pct))) +
  geom_col(aes(fill = flat_type %in% c("2 ROOM", "3 ROOM")), show.legend = FALSE) +
  geom_text(aes(label = paste0(price_change_pct, "%")), hjust = -0.15, size = 3.5, color = "black") +
  scale_fill_manual(values = c("TRUE" = "#5D9CEC", "FALSE" = "#D9D9D9")) +
  scale_x_continuous(limits = c(0, 50), breaks = seq(0, 90, 10)) +
  labs(
    title = "Recreation: Percentage Change in Resale Price",
    subtitle = "From 2020 to 2024, based on our prepared data",
    x = NULL, y = NULL, caption = "Source: Team 16 Analysis of data.gov.sg"
  ) +
  theme_minimal(base_size = 14) +
  theme(panel.grid.major.y = element_blank(), panel.grid.minor.x = element_blank(), plot.title.position = "plot")
```

------------------------------------------------------------------------

### **4. Enhanced Visualizations**

The original charts are simple bar charts. We can create far more insightful and visually appealing charts

```{r}
# 1. Prepare the summary data.
summary_by_type_year <- project_data %>%
  group_by(flat_type, year) %>%
  summarise(median_price = median(resale_price, na.rm = TRUE)) %>%
  ungroup() %>%
  mutate(flat_type = factor(flat_type)) %>%
  arrange(flat_type, year)

# 2. Compute the overall percent change.
pct_change_df <- summary_by_type_year %>%
  filter(year %in% c(2020, 2024)) %>%
  pivot_wider(names_from = year, values_from = median_price, names_prefix = "yr_") %>%
  mutate(pct_change = 100 * (yr_2024 / yr_2020 - 1)) %>%
  select(flat_type, pct_change)

# 3. Join the percentage change back to the data.
plot_data <- summary_by_type_year %>%
  left_join(pct_change_df, by = "flat_type")

# 4. Define a color-blind-friendly palette
# Using Okabe-Ito colors (pilot study for colorblind-safe palette)
cb_palette <- c(
  "#E69F00",  # Orange
  "#56B4E9",  # Sky Blue
  "#009E73",  # Bluish Green
  "#F0E442",  # Yellow
  "#0072B2",  # Blue
  "#D55E00",  # Vermilion
  "#CC79A7"   # Reddish Purple
)
# Truncate or repeat to match number of flat types
flat_types <- levels(plot_data$flat_type)
palette <- cb_palette[seq_along(flat_types)]

# 5. Build the interactive plot
fig <- plot_ly(
    data = plot_data,
    x = ~year,
    y = ~median_price,
    color = ~flat_type,
    colors = palette,
    legendgroup = ~flat_type,
    type = 'scatter',
    mode = 'lines+markers',
    name = ~flat_type,
    customdata = ~pct_change,
    hovertemplate = paste0(
      "<b>%{fullData.name}</b><br>",
      "Year %{x}: $%{y:,.0f}<br>",
      "Total Change (2020–2024): %{customdata:.1f}%",
      "<extra></extra>"
    ),
    height = 550
)

# 6. Add the percentage labels as a separate text layer.
fig <- fig %>% add_text(
    data = filter(plot_data, year == 2024),
    x = ~year,
    y = ~median_price,
    text = ~paste0("+", round(pct_change, 1), "%"),
    color = ~flat_type,
    colors = palette,
    showlegend = FALSE,
    textposition = "middle right",
    textfont = list(size = 11),
    hoverinfo = 'none'
)

# 7. Configure the layout
fig <- fig %>% layout(
    title = list(text = "<b>Enhanced: Median HDB Resale Price by Flat Type (2020–2024)</b>", y = 0.95),
    xaxis = list(
      title = "Year",
      tickmode = "linear",
      tick0 = 2020,
      dtick = 1,
      showgrid = FALSE,
      range = c(2020, 2024.5)   # extend x-axis to ensure space for percentage labels
    ),
    yaxis = list(
      title = "Median Resale Price (SGD)",
      tickprefix = "$",
      tickformat = ",.0f",
      showgrid = TRUE,
      gridcolor = "#f0f0f0"
    ),
    legend = list(
      title = list(text = "<b>Flat Type</b>"),
      orientation = "h",
      xanchor = "center",
      x = 0.5,
      y = -0.2
    ),
    margin = list(l = 80, r = 80, t = 60, b = 100)
) %>%
  config(displayModeBar = FALSE)

# 8. Render the final, color‑blind‑friendly plot
fig
```
