[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Eng Team 16 Project Proposal",
    "section": "",
    "text": "1. Chosen Data Visualization\nWe selected the visualization from the Straits Times article: “Older buyers, smaller households among factors driving demand for smaller flats”\nThe featured chart depicts the percentage increase in HDB resale flat transactions from 2020 to 2024, categorized by flat type. Notably, it shows a 90.7% surge in transactions for 2-room flats, which strongly contrasts with more modest increases for 4-room and 5-room units. This visualization attributes these changes to several key demographic trends:\n\nA growing population of elderly citizens (aged 65 and above), many of whom seek to right-size their homes.\nA steady decline in average household size, falling from 3.5 persons in 2000 to approximately 2.9 in recent years.\nA rise in single-person and two-person households, particularly due to later marriages and aging-in-place.\nIncreased policy flexibility and supply of smaller flats, such as 2-room Flexi schemes, catering to senior citizens and singles.\n\nThis visualization is highly relevant for our project because it offers a clear example of how population ageing and evolving household structures directly influence public housing demand. By enhancing this static chart with dynamic and multi-dimensional data, we aim to uncover deeper patterns in demand across flat types, regions, and years. The outcome could help inform urban development policy and strategies for future housing allocation in Singapore’s maturing society.\n\nOriginal Visualisation 1\n\n\n\nFigure 1: Percentage Change in Resale Price of HDB flats\n\n\n\n\n\n2. Critical Analysis of the Original Visualization\n\nStrengths\n\nClarity and Simplicity: The bar chart effectively presents percentage change data in a manner that is straightforward and accessible, making it suitable for general readers without a technical background.\nEffective Comparison: By organizing the data by flat type, it allows readers to quickly identify which segments of the market are experiencing the fastest growth.\nContextual Relevance: The chart aligns well with the narrative in the article, which explores how social and demographic shifts are shaping the HDB resale landscape.\nClear Labeling: The use of bold titles and explicit labeling helps establish context immediately.\n\n\n\nWeaknesses\n\nLimited Granularity of Insights: The visualization presents an aggregated view of percentage changes across flat types over a four-year period, but it lacks finer granularity. It does not show:\n\nYear-on-year variation, which is critical for identifying short-term market shifts (e.g. policy impacts or economic shocks).\nTown-level or estate-specific data, which prevents detection of spatial patterns or localized demand pressures.\nDemographic segmentation (e.g. age groups, household size, income tiers), which limits the ability to assess how different population segments are influencing demand for smaller flats.\n\nLack of Interactivity and Customization: The static nature of the graphic restricts user engagement and exploration. Viewers are presented with a single, author-defined view of the data and cannot:\n\nFilter by specific years or towns.\nFocus on individual flat types or demographics.\nConduct self-guided analysis.\n\nMinimal Analytical Depth: The original chart is purely descriptive, presenting a one-dimensional summary of percentage change. It does not:\n\nShow base figures or total transaction volumes, making the percentage change potentially misleading.\nProvide contextual explanations (e.g. why 2-room demand increased, or how policy changes like Enhanced CPF Housing Grant may have influenced behavior).\n\n\n\n\n\n3. Planned Improvements\nTo overcome the limitations and offer a more robust and informative visual analysis, our team will develop an interactive dashboard incorporating the following enhancements:\n\nTime Series Visualization: Instead of one aggregated bar chart, we will plot monthly or quarterly transaction volumes from 2017 to 2025. This will reveal how demand evolved in relation to macroeconomic events, housing policies (e.g. cooling measures), and demographic changes.\nGeospatial Mapping: Using HDB town data, we will develop a Singapore map highlighting average resale prices and transaction volumes by region. This will help surface spatial disparities and allow for estate-level insights.\nInteractive Filters: The dashboard will include filters by flat type, town, and year. This will allow users (including policymakers or researchers) to explore patterns relevant to their context.\nCorrelation Visuals: Bubble charts or scatter plots will be used to examine relationships between floor area, resale price, and transaction volume. For example, we can test whether smaller flats in certain towns yield higher per-square-meter prices due to constrained supply.\nDemographic Overlay (if available): If demographic data by town is available, we will attempt to link population structure with housing demand to test assumptions about elderly and single buyers.\n\nOur final dashboard will offer clear, interactive, and multi-layered views that go beyond what a single static image can provide.\n\n\n4. Details of Data Source\nOur primary dataset will come from the HDB Resale Flat Prices repository on data.gov.sg, which offers a granular and authoritative view of public housing resale activity. Key features of this dataset include:\n\nTime Coverage: Monthly records from January 1990 through June 2025.\nAttributes:\n\nFlat type (e.g. 2-room, 3-room, 4-room, etc.)\nFlat model and floor area (in sqm)\nTown and block-level location\nMonth of transaction\nResale price (in SGD)\nStorey range (e.g. 04–06, 10–12)\n\n\nThe dataset is updated monthly and is widely used in public research, making it ideal for reproducible, policy-relevant visual analysis.\nAdditional contextual data will be sourced from SingStat for: - Population by age group - Household size and composition over time - Marital status and homeownership patterns\nTogether, these datasets will enable us to connect population dynamics to housing outcomes more rigorously.\nSample of Raw Data from HDB Resale Flat Prices (data.gov.sg)\n\n\n\n\n\n\n\n\n\n\n\n\n\nmonth\ntown\nflat_type\nblock\nstreet_name\nstorey_range\nfloor_area_sqm\nresale_price\n\n\n\n\n2024-01\nANG MO KIO\n2 ROOM\n406\nANG MO KIO AVE 10\n04 TO 06\n44\n315000\n\n\n2024-01\nANG MO KIO\n3 ROOM\n108\nANG MO KIO AVE 4\n01 TO 03\n67\n342000\n\n\n2024-01\nBEDOK\n4 ROOM\n516\nBEDOK NTH AVE 2\n07 TO 09\n92\n535000\n\n\n2024-01\nBUKIT MERAH\n5 ROOM\n108\nHENDERSON CRES\n10 TO 12\n117\n968000\n\n\n2024-01\nCLEMENTI\n3 ROOM\n377\nCLEMENTI AVE 5\n01 TO 03\n67\n365000\n\n\n\n\n\n5. Steps for Data Cleaning and Transformation\nTo prepare our data for rigorous analysis and visualization within the R environment, we will follow a structured workflow using core R packages, primarily from the tidyverse suite.\n\n5.1. Data Loading and Initial Inspection\n\nAction: The “Resale Flat Prices” dataset will be downloaded as a CSV file. We will load it into RStudio using the readr::read_csv() function to create a tibble (a modern data frame).\nPurpose: This initial step allows us to perform a preliminary assessment of the dataset’s structure using functions like glimpse(), summary(), and head() to understand its dimensions, variable types, and overall content before proceeding with cleaning.\n\n\n\n5.2. Missing Value Handling and Data Integrity\n\nAction: We will use the naniar or visdat package to visualize missing data patterns and dplyr::summarise() to quantify NA values in critical columns like resale_price, floor_area_sqm, and storey_range.\nPurpose: Identifying and addressing missing data is crucial for accurate modeling. For any NA values, we will evaluate the best strategy. If records with missing data are minimal, we may filter them out using na.omit() or tidyr::drop_na(). For more significant gaps, we will consider imputation, potentially using the median value for a given town and flat type to preserve the data’s distribution.\n\n\n\n5.3. Data Type Conversion\n\nAction: We will convert variable types to ensure they are appropriate for analysis. The month column (e.g., “2023-05”) will be parsed into a proper Date object using the lubridate::ym() function. Other columns like resale_price and floor_area_sqm will be ensured to be of numeric type using as.numeric().\nPurpose: Correct data types are essential for R functions to work correctly. Converting month to a Date object is critical for enabling time-series analysis, creating rolling averages, and plotting chronological trends.\n\n\n\n5.4. Feature Engineering\nUsing dplyr::mutate(), we will create several new, more informative variables:\n\nTemporal Features: We will use lubridate functions like year() and quarter() on our new Date column to extract the year and quarter, facilitating aggregation and trend analysis at different time scales.\nPrice per Square Metre (PSM): A new column, price_per_sqm, will be calculated by dividing resale_price by floor_area_sqm. This normalization is key to comparing property values fairly across different flat sizes and locations.\nStorey Level Conversion: The storey_range (e.g., “01 TO 03”) will be converted into a numeric variable. We will use stringr functions to extract the lower and upper bounds of the range and calculate the midpoint, allowing us to analyze the relationship between storey height and price.\n\n\n\n5.5. Data Aggregation and Integration\n\nAction: We will leverage dplyr::group_by() and dplyr::summarise() to aggregate the cleaned data. This will allow us to create summary tables based on dimensions like town, flat_type, and year.\nPurpose: Aggregated data is the foundation for our visualizations and high-level analysis. It will enable us to calculate key metrics such as mean/median price_per_sqm by town, which is necessary for creating choropleth maps, or by time period for generating time-series plots. If external demographic data is used, it will be joined to our main dataset using a dplyr::left_join() operation on a common key like town.\n\n\n\n\n6. Data Analysis Plan\nOur analysis will aim to provide evidence-backed insights on how demand for smaller flats has evolved in response to demographic shifts. The main areas of analysis include:\n\nDescriptive Statistics: Calculate averages, medians, and distribution patterns of resale prices and floor areas segmented by flat type and location.\nTrend Analysis:\n\nTrack year-on-year changes in both transaction volume and resale price for 2-room, 3-room, and larger flats.\nIdentify notable spikes or dips in relation to external factors.\n\nSpatial Analysis:\n\nMap average prices and volume by town to identify hotspots of demand.\nHighlight any regional inequalities in pricing or transaction growth.\n\nCorrelation Analysis:\n\nInvestigate links between demographic indicators and demand for smaller flats.\nTest if towns with higher aging populations see greater price growth in 2-room resale units.\n\nExploratory Insights:\n\nObserve whether price appreciation in smaller flats is outpacing larger units, potentially indicating shrinking supply or over-demand.\n\n\nThe outcome of our analysis will serve to validate, challenge, or deepen the conclusions drawn in the original news article.\n\n\n7. Work Allocation\n\n\n\n\n\n\n\n\n\nTask\nPrimary Lead(s)\nSupporting Member(s)\nDescription\n\n\n\n\nData Sourcing & Cleaning\nJiarui\nWeixuan\nResponsible for downloading the datasets from data.gov.sg and SingStat, loading them into R, and performing initial cleaning. This includes handling missing values (NA), correcting data types, and ensuring data integrity.\n\n\nFeature Engineering & Transformation\nWeixuan\nJiarui\nBuilds upon the cleaned data to create new, analytical variables. Key tasks include calculating price_per_sqm, converting the storey_range into a numeric variable, and extracting year and quarter for time-series analysis.\n\n\nExploratory Data Analysis (EDA) & Hypothesis Testing\nElsia\nJiarui, Weixuan\nConducts the initial statistical analysis to uncover patterns and validate assumptions. This involves creating summary statistics, generating preliminary plots (histograms, boxplots), and investigating initial trends to guide the final dashboard design.\n\n\nInteractive Dashboard Development (Core & Time Series)\nHaris\nShi Wei\nLeads the development of the main interactive dashboard using flexdashboard or Shiny. This includes setting up the overall layout, implementing core interactive filters (by town, flat type, year), and building the primary time-series visualization.\n\n\nGeospatial & Correlation Visualizations\nShi Wei\nHaris, Elsia\nFocuses on developing the specialized visualizations for the dashboard. This includes creating the choropleth map to show spatial patterns by town and building the bubble/scatter plots to visualize correlations between price, floor area, and transaction volume."
  },
  {
    "objectID": "HDB Resale Analysis and Visualization.html",
    "href": "HDB Resale Analysis and Visualization.html",
    "title": "HDB Resale Trends: Analysis and Enhanced Visualization",
    "section": "",
    "text": "This document validates our cleaned data against the original Straits Times article, reconstructs the article’s visualizations, and presents three new, improved charts to uncover deeper insights into the HDB resale market from 2020-2024.\n\n\n\nThis first step loads the necessary libraries and reads the clean CSV files that were created by our data_cleaning.qmd script.\n\n# --- 1. Setup and Load All Data ---\n\n# List of required packages for analysis and visualization\npackages &lt;- c(\"tidyverse\", \"lubridate\", \"scales\", \"forcats\", \"ggridges\", \"plotly\", \"sf\",\"patchwork\")\n\n# Loop through each package\nfor (pkg in packages) {\n  # Install the package if it's not already installed\n  if (!require(pkg, character.only = TRUE)) {\n    install.packages(pkg)\n  }\n  # Load the package\n  library(pkg, character.only = TRUE)\n}\n\n# Set global options for cleaner output\noptions(scipen = 999)\noptions(dplyr.summarise.inform = FALSE)\n\n# --- Load the CLEAN datasets from the previous script ---\n# Make sure these files are in a \"data_output\" subfolder.\nproject_data &lt;- read_csv(\"data_output/cleaned_hdb_resale_data.csv\")\npercentage_change &lt;- read_csv(\"data_output/percentage_change_analysis.csv\")\n\n# Confirm that data is loaded\ncat(\"Clean data loaded successfully. project_data has\", nrow(project_data), \"rows.\\n\")\n\nClean data loaded successfully. project_data has 127606 rows.\n\n\n\n\n\n\nWe first check if our data matches the key statistics cited in the article. This confirms the quality of our data preparation.\n\n# --- Validation 1: Transaction Counts (Jan-Nov) ---\ntransaction_validation &lt;- project_data %&gt;%\n  filter(month(month) &lt;= 11) %&gt;%\n  filter(flat_type == \"2 ROOM\", year %in% c(2020, 2024)) %&gt;%\n  group_by(year) %&gt;%\n  summarise(transaction_count = n())\n\nprint(\"Validation - 2-Room Transaction Counts (Jan-Nov):\")\n\n[1] \"Validation - 2-Room Transaction Counts (Jan-Nov):\"\n\nprint(transaction_validation)\n\n# A tibble: 2 × 2\n   year transaction_count\n  &lt;dbl&gt;             &lt;int&gt;\n1  2020               386\n2  2024               731\n\ncat(\"Article cited 388 (2020) and 740 (2024).\\n\\n\")\n\nArticle cited 388 (2020) and 740 (2024).\n\n# --- Validation 2 & 3: Median Prices (Q4) ---\nprice_validation &lt;- project_data %&gt;%\n  filter(quarter(month, with_year = FALSE) == 4) %&gt;%\n  filter(flat_type %in% c(\"2 ROOM\", \"3 ROOM\"), year %in% c(2020, 2024)) %&gt;%\n  group_by(flat_type, year) %&gt;%\n  summarise(median_price = median(resale_price, na.rm = TRUE)) %&gt;%\n  arrange(flat_type, year)\n\nprint(\"Validation - Median Prices in Q4:\")\n\n[1] \"Validation - Median Prices in Q4:\"\n\nprint(price_validation)\n\n# A tibble: 4 × 3\n# Groups:   flat_type [2]\n  flat_type  year median_price\n  &lt;chr&gt;     &lt;dbl&gt;        &lt;dbl&gt;\n1 2 ROOM     2020       238000\n2 2 ROOM     2024       355000\n3 3 ROOM     2020       305000\n4 3 ROOM     2024       424000\n\ncat(\"Article cited $238k/$353k for 2-room and $308k/$430k for 3-room.\\n\")\n\nArticle cited $238k/$353k for 2-room and $308k/$430k for 3-room.\n\n\n\n\n\n\nUsing our validated data, we recreate the two simple bar charts from the news article for direct comparison.\n\n\n\nggplot(percentage_change, \n       aes(x = percentage_change, \n           y = fct_reorder(flat_type_label, percentage_change))) +\n  geom_col(aes(fill = percentage_change &gt; 0), show.legend = FALSE) +\n  geom_text(aes(label = paste0(percentage_change, \"%\")), hjust = -0.15, size = 3.5, color = \"black\") +\n  scale_fill_manual(values = c(\"TRUE\" = \"#5D9CEC\", \"FALSE\" = \"#D9D9D9\")) +\n  scale_x_continuous(limits = c(-30, 100), breaks = seq(-30, 90, 10)) +\n  labs(\n    title = \"Recreation: Percentage Change in HDB Transactions\",\n    subtitle = \"From 2020 to 2024, based on our prepared data\",\n    x = NULL, y = NULL, caption = \"Source: Team 16 Analysis of data.gov.sg\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(panel.grid.major.y = element_blank(), panel.grid.minor.x = element_blank(), plot.title.position = \"plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n# Prepare data for the price change chart\nprice_change_summary &lt;- project_data %&gt;%\n  filter(year %in% c(2020, 2024)) %&gt;%\n  group_by(flat_type, year) %&gt;%\n  summarise(median_price = median(resale_price, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  complete(flat_type, year = c(2020, 2024), fill = list(median_price = 0)) %&gt;%\n  pivot_wider(names_from = year, values_from = median_price, names_prefix = \"year_\") %&gt;%\n  mutate(\n    price_change_pct = if_else(year_2020 &gt; 0, round(((year_2024 - year_2020) / year_2020) * 100, 1), NA_real_),\n    flat_type_label = str_replace(flat_type, \" ROOM\", \"-room\") %&gt;% str_to_title()\n  ) %&gt;%\n  filter(!is.na(price_change_pct))\n\n# Recreate the price change chart\nggplot(price_change_summary, \n       aes(x = price_change_pct, \n           y = fct_reorder(flat_type_label, price_change_pct))) +\n  geom_col(aes(fill = flat_type %in% c(\"2 ROOM\", \"3 ROOM\")), show.legend = FALSE) +\n  geom_text(aes(label = paste0(price_change_pct, \"%\")), hjust = -0.15, size = 3.5, color = \"black\") +\n  scale_fill_manual(values = c(\"TRUE\" = \"#5D9CEC\", \"FALSE\" = \"#D9D9D9\")) +\n  scale_x_continuous(limits = c(0, 50), breaks = seq(0, 90, 10)) +\n  labs(\n    title = \"Recreation: Percentage Change in Resale Price\",\n    subtitle = \"From 2020 to 2024, based on our prepared data\",\n    x = NULL, y = NULL, caption = \"Source: Team 16 Analysis of data.gov.sg\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(panel.grid.major.y = element_blank(), panel.grid.minor.x = element_blank(), plot.title.position = \"plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe original charts are simple bar charts. We can create far more insightful and visually appealing charts by exploring distributions, trends over time, and spatial patterns in the data.\n\n\nA ridgeline plot shows the full range of prices, not just a single number. This reveals the significant overlap in prices between different flat types.\n\nif (!require(\"ggridges\")) {\n  install.packages(\"ggridges\")\n}\nlibrary(ggridges)\n\n# --- CORRECTED CODE ---\n# Prepare data with a clean label for plotting\nplot_data &lt;- project_data %&gt;%\n  filter(flat_type %in% c(\"2 ROOM\", \"3 ROOM\", \"4 ROOM\", \"5 ROOM\", \"EXECUTIVE\")) %&gt;%\n  mutate(\n    # Create the clean label (e.g., \"2 ROOM\" -&gt; \"2-Room\")\n    flat_type_label = str_replace(flat_type, \" ROOM\", \"-room\") %&gt;% str_to_title()\n  )\n\n# This ggplot call will now work correctly because `flat_type_label` exists\nggplot(plot_data, aes(x = resale_price, y = fct_rev(flat_type_label), fill = flat_type_label)) +\n  geom_density_ridges(alpha = 0.8, scale = 1.5) +\n  scale_x_continuous(labels = scales::dollar_format(scale = 1e-3, suffix = \"k\")) +\n  labs(\n    title = \"Improved Viz: Price Distribution Varies Significantly by Flat Type\",\n    subtitle = \"Distribution of HDB resale prices from 2020-2024. Note the wide overlap.\",\n    x = \"Resale Price (S$)\",\n    y = NULL,\n    caption = \"Source: Team 16 Analysis of data.gov.sg\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(legend.position = \"none\", plot.title.position = \"plot\") \n\n\n\n\n\n\n\n\n\n\n\nA time series plot showing how prices evolved monthly, with smooth trend lines and confidence intervals.\n\n# Prepare monthly trend data\nmonthly_trends &lt;- project_data %&gt;%\n  filter(flat_type %in% c(\"2 ROOM\", \"3 ROOM\", \"4 ROOM\", \"5 ROOM\", \"EXECUTIVE\")) %&gt;%\n  mutate(\n    flat_type_label = str_replace(flat_type, \" ROOM\", \"-Room\") %&gt;% str_to_title(),\n    year_month = floor_date(month, \"month\")\n  ) %&gt;%\n  group_by(year_month, flat_type_label) %&gt;%\n  summarise(\n    median_price = median(resale_price, na.rm = TRUE),\n    q25 = quantile(resale_price, 0.25, na.rm = TRUE),\n    q75 = quantile(resale_price, 0.75, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n# Create an elegant time series plot\nggplot(monthly_trends, aes(x = year_month, y = median_price, color = flat_type_label, fill = flat_type_label)) +\n  geom_ribbon(aes(ymin = q25, ymax = q75), alpha = 0.2, color = NA) +\n  geom_line(size = 1.2, alpha = 0.9) +\n  geom_point(size = 1.5, alpha = 0.8) +\n  scale_x_date(\n    date_labels = \"%Y-%m\",\n    date_breaks = \"6 months\",\n    expand = c(0.02, 0.02)\n  ) +\n  scale_y_continuous(\n    labels = scales::dollar_format(scale = 1e-3, suffix = \"K\"),\n    breaks = scales::pretty_breaks(n = 6)\n  ) +\n  scale_color_viridis_d(option = \"plasma\", begin = 0.1, end = 0.9) +\n  scale_fill_viridis_d(option = \"plasma\", begin = 0.1, end = 0.9) +\n  labs(\n    title = \"HDB Resale Price Trends Over Time\",\n    subtitle = \"Monthly median prices with interquartile ranges (ribbons) showing market volatility\",\n    x = \"Year-Month\",\n    y = \"Median Resale Price (S$)\",\n    color = \"Flat Type\",\n    fill = \"Flat Type\",\n    caption = \"Source: Team 16 Analysis of data.gov.sg\"\n  ) +\n  theme_minimal(base_size = 13) +\n  theme(\n    plot.title.position = \"plot\",\n    plot.title = element_text(face = \"bold\", size = 16),\n    plot.subtitle = element_text(color = \"grey40\", size = 11),\n    legend.position = \"bottom\",\n    legend.title = element_text(face = \"bold\"),\n    panel.grid.minor = element_blank(),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.margin = margin(20, 20, 20, 20)\n  ) +\n  guides(\n    color = guide_legend(override.aes = list(size = 3)),\n    fill = guide_legend(override.aes = list(alpha = 0.3))\n  )\n\n\n\n\n\n\n\n\n\n\n\nA modern scatter plot with trend lines and marginal distributions showing the relationship between floor height and price efficiency.\n\n# Prepare data for storey analysis\nstorey_analysis &lt;- project_data %&gt;%\n  filter(\n    flat_type %in% c(\"2 ROOM\", \"3 ROOM\", \"4 ROOM\", \"5 ROOM\", \"EXECUTIVE\"),\n    storey_mid &lt;= 50, # Remove extreme outliers\n    price_per_sqm &gt; 0 & price_per_sqm &lt; 15000 # Remove price outliers\n  ) %&gt;%\n  mutate(\n    flat_type_label = str_replace(flat_type, \" ROOM\", \"-Room\") %&gt;% str_to_title(),\n    storey_group = case_when(\n      storey_mid &lt;= 5 ~ \"Low (1-5)\",\n      storey_mid &lt;= 10 ~ \"Mid-Low (6-10)\",\n      storey_mid &lt;= 15 ~ \"Mid (11-15)\",\n      storey_mid &lt;= 20 ~ \"Mid-High (16-20)\",\n      TRUE ~ \"High (21+)\"\n    ),\n    storey_group = factor(storey_group, levels = c(\"Low (1-5)\", \"Mid-Low (6-10)\", \"Mid (11-15)\", \"Mid-High (16-20)\", \"High (21+)\"))\n  )\n\n# Create an enhanced box plot for clearer trend analysis\nggplot(storey_analysis, \n       aes(x = storey_group, y = price_per_sqm, fill = storey_group)) +\n  geom_boxplot(alpha = 0.8, outlier.shape = NA) + # Hiding outliers for clarity\n  scale_y_continuous(\n    labels = scales::dollar_format(prefix = \"S$\"),\n    limits = quantile(storey_analysis$price_per_sqm, c(0.01, 0.99), na.rm = TRUE) # Zoom in\n  ) +\n  scale_fill_viridis_d(option = \"cividis\", guide = \"none\") +\n  facet_wrap(~flat_type_label, scales = \"free_y\", ncol = 3) +\n  labs(\n    title = \"Price per Sqm Distribution by Storey Height\",\n    subtitle = \"Box plots clearly show increasing price efficiency with height, faceted by flat type\",\n    x = \"Storey Group\",\n    y = \"Price per Square Meter (S$)\",\n    caption = \"Source: Team 16 Analysis of data.gov.sg\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    plot.title.position = \"plot\",\n    plot.title = element_text(face = \"bold\", size = 16),\n    plot.subtitle = element_text(color = \"grey40\", size = 11),\n    panel.grid.minor = element_blank(),\n    strip.text = element_text(face = \"bold\", size = 11),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.margin = margin(20, 20, 20, 20)\n  )\n\n\n\n\n\n\n\n\n\n\n\nA modern horizontal bar chart showing median prices by town, with interactive tooltips when rendered in HTML.\n\n# Prepare town-wise analysis\ntown_analysis &lt;- project_data %&gt;%\n  group_by(town) %&gt;%\n  summarise(\n    median_price = median(resale_price, na.rm = TRUE),\n    median_psm = median(price_per_sqm, na.rm = TRUE),\n    transaction_count = n(),\n    .groups = \"drop\"\n  ) %&gt;%\n  filter(transaction_count &gt;= 50) %&gt;% # Only include towns with sufficient data\n  arrange(desc(median_price)) %&gt;%\n  mutate(\n    town_rank = row_number(),\n    price_category = case_when(\n      median_price &gt;= 600000 ~ \"Premium (≥S$600K)\",\n      median_price &gt;= 450000 ~ \"High (S$450K-600K)\",\n      median_price &gt;= 350000 ~ \"Mid (S$350K-450K)\",\n      TRUE ~ \"Affordable (&lt;S$350K)\"\n    ),\n    price_category = factor(price_category, levels = c(\"Premium (≥S$600K)\", \"High (S$450K-600K)\", \"Mid (S$350K-450K)\", \"Affordable (&lt;S$350K)\"))\n  ) %&gt;%\n  slice_head(n = 20) # Show top 20 towns\n\n# Step 1: Create the ggplot object with a 'text' aesthetic for the tooltip\np_towns &lt;- ggplot(town_analysis, \n                  aes(x = median_price, y = fct_reorder(town, median_price), fill = price_category,\n                      # Define the custom tooltip content here\n                      text = paste(\"Town:\", town, \n                                   \"\\nMedian Price:\", scales::dollar(median_price),\n                                   \"\\nMedian PSM:\", scales::dollar(median_psm),\n                                   \"\\nTransactions:\", transaction_count))) +\n  geom_col(alpha = 0.8, width = 0.7) +\n  scale_x_continuous(\n    labels = scales::dollar_format(scale = 1e-3, suffix = \"K\"),\n    expand = expansion(mult = c(0, 0.15)) # Make space for labels/tooltips\n  ) +\n  scale_fill_manual(values = c(\n    \"Premium (≥S$600K)\" = \"#E31A1C\",\n    \"High (S$450K-600K)\" = \"#FF7F00\", \n    \"Mid (S$350K-450K)\" = \"#1F78B4\",\n    \"Affordable (&lt;S$350K)\" = \"#33A02C\"\n  )) +\n  labs(\n    title = \"Interactive Top 20 HDB Towns by Median Resale Price\",\n    subtitle = \"Ranked by median price (2020-2024). Hover on bars for details.\",\n    x = \"Median Resale Price (S$)\",\n    y = NULL,\n    fill = \"Price Category\",\n    caption = \"Source: Team 16 Analysis of data.gov.sg\"\n  ) +\n  theme_minimal(base_size = 13) +\n  theme(\n    plot.title.position = \"plot\",\n    plot.title = element_text(face = \"bold\", size = 16),\n    plot.subtitle = element_text(color = \"grey40\", size = 11),\n    legend.position = \"bottom\",\n    panel.grid.major.y = element_blank(),\n    axis.text.y = element_text(face = \"bold\"),\n    plot.margin = margin(20, 20, 20, 20)\n  )\n\n# Step 2: Convert the ggplot object to an interactive plotly chart\nplotly::ggplotly(p_towns, tooltip = \"text\")\n\n\n\n\n\n\n\n\nThis multi-panel dashboard, built with the patchwork package, provides a powerful, at-a-glance summary of the HDB resale market, combining price trends, transaction volumes, and market share into a single, cohesive view.\n\n# Prepare summary statistics for the dashboard\nsummary_stats &lt;- project_data %&gt;%\n  filter(flat_type %in% c(\"2 ROOM\", \"3 ROOM\", \"4 ROOM\", \"5 ROOM\", \"EXECUTIVE\")) %&gt;%\n  mutate(flat_type_label = str_replace(flat_type, \" ROOM\", \"-Room\") %&gt;% str_to_title()) %&gt;%\n  group_by(flat_type_label, year) %&gt;%\n  summarise(\n    median_price = median(resale_price, na.rm = TRUE),\n    median_psm = median(price_per_sqm, na.rm = TRUE),\n    transaction_count = n(),\n    .groups = \"drop\"\n  )\n\n# Panel 1: Price evolution by year\np1 &lt;- ggplot(summary_stats, aes(x = year, y = median_price, color = flat_type_label)) +\n  geom_line(size = 1.2, alpha = 0.9) +\n  geom_point(size = 2) +\n  scale_x_continuous(breaks = 2020:2024) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1e-3, suffix = \"K\")) +\n  scale_color_viridis_d(option = \"plasma\", begin = 0.1, end = 0.9) +\n  labs(title = \"A. Price Evolution by Year\", x = NULL, y = \"Median Price\", color = \"Flat Type\") +\n  theme_minimal(base_size = 12) +\n  theme(plot.title = element_text(face = \"bold\"), legend.title = element_text(face=\"bold\"))\n\n# Panel 2: Transaction volume by year\np2 &lt;- ggplot(summary_stats, aes(x = year, y = transaction_count, fill = flat_type_label)) +\n  geom_col(position = \"stack\", alpha = 0.8) +\n  scale_x_continuous(breaks = 2020:2024) +\n  scale_y_continuous(labels = scales::comma) +\n  scale_fill_viridis_d(option = \"plasma\", begin = 0.1, end = 0.9) +\n  labs(title = \"B. Transaction Volume by Year\", x = NULL, y = \"Transactions\", fill = \"Flat Type\") +\n  theme_minimal(base_size = 12) +\n  theme(plot.title = element_text(face = \"bold\"), legend.title = element_text(face=\"bold\"))\n\n# Panel 3: Price per sqm comparison\np3 &lt;- ggplot(summary_stats %&gt;% filter(year %in% c(2020, 2024)), \n             aes(x = fct_reorder(flat_type_label, median_psm), y = median_psm, fill = factor(year))) +\n  geom_col(position = \"dodge\", alpha = 0.8) +\n  scale_y_continuous(labels = scales::dollar_format(prefix = \"S$\")) +\n  scale_fill_manual(values = c(\"2020\" = \"#440154FF\", \"2024\" = \"#FDE725FF\"), name = \"Year\") +\n  labs(title = \"C. Price per Sqm: 2020 vs 2024\", x = NULL, y = \"Median PSM\") +\n  theme_minimal(base_size = 12) +\n  theme(plot.title = element_text(face = \"bold\"), axis.text.x = element_text(angle=45, hjust=1), legend.title = element_text(face=\"bold\"))\n\n# Panel 4: Market share by flat type in the last full year\n# We use 2023 for a full year's data, as 2024 is incomplete.\nmarket_share &lt;- summary_stats %&gt;%\n  group_by(year) %&gt;%\n  mutate(market_share = transaction_count / sum(transaction_count)) %&gt;%\n  ungroup() %&gt;%\n  filter(year == 2023)\n\np4 &lt;- ggplot(market_share, aes(x = \"\", y = market_share, fill = fct_reorder(flat_type_label, market_share))) +\n  geom_col(width = 1, alpha = 0.8) +\n  coord_polar(\"y\", start = 0) +\n  geom_text(aes(label = scales::percent(market_share, accuracy = 1)), \n            position = position_stack(vjust = 0.5), color = \"white\", fontface = \"bold\") +\n  scale_fill_viridis_d(option = \"plasma\", begin = 0.1, end = 0.9, guide=\"none\") +\n  labs(title = \"D. Market Share by Flat Type (2023)\") +\n  theme_void(base_size = 12) +\n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5))\n\n\n# --- FIX IS HERE ---\n# Combine all panels using patchwork.\n# We wrap the main plot composition in parentheses to ensure it's evaluated\n# fully before the `&` operator is applied. This resolves the precedence issue.\n(\n  (p1 + p2) / (p3 + p4) + \n    plot_annotation(\n      title = 'HDB Resale Market Dashboard (2020-2024)',\n      subtitle = 'An overview of price evolution, transaction volumes, price efficiency, and market share.',\n      caption = 'Source: Team 16 Analysis of data.gov.sg',\n      theme = theme(\n        plot.title = element_text(face = \"bold\", size = 22, hjust = 0.5),\n        plot.subtitle = element_text(size = 14, hjust = 0.5, color=\"grey40\"),\n        plot.caption = element_text(size=10, color=\"grey50\")\n      )\n    )\n) & \n  theme(legend.position = \"bottom\", legend.box = \"horizontal\")"
  },
  {
    "objectID": "HDB Resale Analysis and Visualization.html#introduction",
    "href": "HDB Resale Analysis and Visualization.html#introduction",
    "title": "HDB Resale Trends: Analysis and Enhanced Visualization",
    "section": "",
    "text": "This document validates our cleaned data against the original Straits Times article, reconstructs the article’s visualizations, and presents three new, improved charts to uncover deeper insights into the HDB resale market from 2020-2024.\n\n\n\nThis first step loads the necessary libraries and reads the clean CSV files that were created by our data_cleaning.qmd script.\n\n# --- 1. Setup and Load All Data ---\n\n# List of required packages for analysis and visualization\npackages &lt;- c(\"tidyverse\", \"lubridate\", \"scales\", \"forcats\", \"ggridges\", \"plotly\", \"sf\",\"patchwork\")\n\n# Loop through each package\nfor (pkg in packages) {\n  # Install the package if it's not already installed\n  if (!require(pkg, character.only = TRUE)) {\n    install.packages(pkg)\n  }\n  # Load the package\n  library(pkg, character.only = TRUE)\n}\n\n# Set global options for cleaner output\noptions(scipen = 999)\noptions(dplyr.summarise.inform = FALSE)\n\n# --- Load the CLEAN datasets from the previous script ---\n# Make sure these files are in a \"data_output\" subfolder.\nproject_data &lt;- read_csv(\"data_output/cleaned_hdb_resale_data.csv\")\npercentage_change &lt;- read_csv(\"data_output/percentage_change_analysis.csv\")\n\n# Confirm that data is loaded\ncat(\"Clean data loaded successfully. project_data has\", nrow(project_data), \"rows.\\n\")\n\nClean data loaded successfully. project_data has 127606 rows.\n\n\n\n\n\n\nWe first check if our data matches the key statistics cited in the article. This confirms the quality of our data preparation.\n\n# --- Validation 1: Transaction Counts (Jan-Nov) ---\ntransaction_validation &lt;- project_data %&gt;%\n  filter(month(month) &lt;= 11) %&gt;%\n  filter(flat_type == \"2 ROOM\", year %in% c(2020, 2024)) %&gt;%\n  group_by(year) %&gt;%\n  summarise(transaction_count = n())\n\nprint(\"Validation - 2-Room Transaction Counts (Jan-Nov):\")\n\n[1] \"Validation - 2-Room Transaction Counts (Jan-Nov):\"\n\nprint(transaction_validation)\n\n# A tibble: 2 × 2\n   year transaction_count\n  &lt;dbl&gt;             &lt;int&gt;\n1  2020               386\n2  2024               731\n\ncat(\"Article cited 388 (2020) and 740 (2024).\\n\\n\")\n\nArticle cited 388 (2020) and 740 (2024).\n\n# --- Validation 2 & 3: Median Prices (Q4) ---\nprice_validation &lt;- project_data %&gt;%\n  filter(quarter(month, with_year = FALSE) == 4) %&gt;%\n  filter(flat_type %in% c(\"2 ROOM\", \"3 ROOM\"), year %in% c(2020, 2024)) %&gt;%\n  group_by(flat_type, year) %&gt;%\n  summarise(median_price = median(resale_price, na.rm = TRUE)) %&gt;%\n  arrange(flat_type, year)\n\nprint(\"Validation - Median Prices in Q4:\")\n\n[1] \"Validation - Median Prices in Q4:\"\n\nprint(price_validation)\n\n# A tibble: 4 × 3\n# Groups:   flat_type [2]\n  flat_type  year median_price\n  &lt;chr&gt;     &lt;dbl&gt;        &lt;dbl&gt;\n1 2 ROOM     2020       238000\n2 2 ROOM     2024       355000\n3 3 ROOM     2020       305000\n4 3 ROOM     2024       424000\n\ncat(\"Article cited $238k/$353k for 2-room and $308k/$430k for 3-room.\\n\")\n\nArticle cited $238k/$353k for 2-room and $308k/$430k for 3-room.\n\n\n\n\n\n\nUsing our validated data, we recreate the two simple bar charts from the news article for direct comparison.\n\n\n\nggplot(percentage_change, \n       aes(x = percentage_change, \n           y = fct_reorder(flat_type_label, percentage_change))) +\n  geom_col(aes(fill = percentage_change &gt; 0), show.legend = FALSE) +\n  geom_text(aes(label = paste0(percentage_change, \"%\")), hjust = -0.15, size = 3.5, color = \"black\") +\n  scale_fill_manual(values = c(\"TRUE\" = \"#5D9CEC\", \"FALSE\" = \"#D9D9D9\")) +\n  scale_x_continuous(limits = c(-30, 100), breaks = seq(-30, 90, 10)) +\n  labs(\n    title = \"Recreation: Percentage Change in HDB Transactions\",\n    subtitle = \"From 2020 to 2024, based on our prepared data\",\n    x = NULL, y = NULL, caption = \"Source: Team 16 Analysis of data.gov.sg\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(panel.grid.major.y = element_blank(), panel.grid.minor.x = element_blank(), plot.title.position = \"plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n# Prepare data for the price change chart\nprice_change_summary &lt;- project_data %&gt;%\n  filter(year %in% c(2020, 2024)) %&gt;%\n  group_by(flat_type, year) %&gt;%\n  summarise(median_price = median(resale_price, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  complete(flat_type, year = c(2020, 2024), fill = list(median_price = 0)) %&gt;%\n  pivot_wider(names_from = year, values_from = median_price, names_prefix = \"year_\") %&gt;%\n  mutate(\n    price_change_pct = if_else(year_2020 &gt; 0, round(((year_2024 - year_2020) / year_2020) * 100, 1), NA_real_),\n    flat_type_label = str_replace(flat_type, \" ROOM\", \"-room\") %&gt;% str_to_title()\n  ) %&gt;%\n  filter(!is.na(price_change_pct))\n\n# Recreate the price change chart\nggplot(price_change_summary, \n       aes(x = price_change_pct, \n           y = fct_reorder(flat_type_label, price_change_pct))) +\n  geom_col(aes(fill = flat_type %in% c(\"2 ROOM\", \"3 ROOM\")), show.legend = FALSE) +\n  geom_text(aes(label = paste0(price_change_pct, \"%\")), hjust = -0.15, size = 3.5, color = \"black\") +\n  scale_fill_manual(values = c(\"TRUE\" = \"#5D9CEC\", \"FALSE\" = \"#D9D9D9\")) +\n  scale_x_continuous(limits = c(0, 50), breaks = seq(0, 90, 10)) +\n  labs(\n    title = \"Recreation: Percentage Change in Resale Price\",\n    subtitle = \"From 2020 to 2024, based on our prepared data\",\n    x = NULL, y = NULL, caption = \"Source: Team 16 Analysis of data.gov.sg\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(panel.grid.major.y = element_blank(), panel.grid.minor.x = element_blank(), plot.title.position = \"plot\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe original charts are simple bar charts. We can create far more insightful and visually appealing charts by exploring distributions, trends over time, and spatial patterns in the data.\n\n\nA ridgeline plot shows the full range of prices, not just a single number. This reveals the significant overlap in prices between different flat types.\n\nif (!require(\"ggridges\")) {\n  install.packages(\"ggridges\")\n}\nlibrary(ggridges)\n\n# --- CORRECTED CODE ---\n# Prepare data with a clean label for plotting\nplot_data &lt;- project_data %&gt;%\n  filter(flat_type %in% c(\"2 ROOM\", \"3 ROOM\", \"4 ROOM\", \"5 ROOM\", \"EXECUTIVE\")) %&gt;%\n  mutate(\n    # Create the clean label (e.g., \"2 ROOM\" -&gt; \"2-Room\")\n    flat_type_label = str_replace(flat_type, \" ROOM\", \"-room\") %&gt;% str_to_title()\n  )\n\n# This ggplot call will now work correctly because `flat_type_label` exists\nggplot(plot_data, aes(x = resale_price, y = fct_rev(flat_type_label), fill = flat_type_label)) +\n  geom_density_ridges(alpha = 0.8, scale = 1.5) +\n  scale_x_continuous(labels = scales::dollar_format(scale = 1e-3, suffix = \"k\")) +\n  labs(\n    title = \"Improved Viz: Price Distribution Varies Significantly by Flat Type\",\n    subtitle = \"Distribution of HDB resale prices from 2020-2024. Note the wide overlap.\",\n    x = \"Resale Price (S$)\",\n    y = NULL,\n    caption = \"Source: Team 16 Analysis of data.gov.sg\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(legend.position = \"none\", plot.title.position = \"plot\") \n\n\n\n\n\n\n\n\n\n\n\nA time series plot showing how prices evolved monthly, with smooth trend lines and confidence intervals.\n\n# Prepare monthly trend data\nmonthly_trends &lt;- project_data %&gt;%\n  filter(flat_type %in% c(\"2 ROOM\", \"3 ROOM\", \"4 ROOM\", \"5 ROOM\", \"EXECUTIVE\")) %&gt;%\n  mutate(\n    flat_type_label = str_replace(flat_type, \" ROOM\", \"-Room\") %&gt;% str_to_title(),\n    year_month = floor_date(month, \"month\")\n  ) %&gt;%\n  group_by(year_month, flat_type_label) %&gt;%\n  summarise(\n    median_price = median(resale_price, na.rm = TRUE),\n    q25 = quantile(resale_price, 0.25, na.rm = TRUE),\n    q75 = quantile(resale_price, 0.75, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n# Create an elegant time series plot\nggplot(monthly_trends, aes(x = year_month, y = median_price, color = flat_type_label, fill = flat_type_label)) +\n  geom_ribbon(aes(ymin = q25, ymax = q75), alpha = 0.2, color = NA) +\n  geom_line(size = 1.2, alpha = 0.9) +\n  geom_point(size = 1.5, alpha = 0.8) +\n  scale_x_date(\n    date_labels = \"%Y-%m\",\n    date_breaks = \"6 months\",\n    expand = c(0.02, 0.02)\n  ) +\n  scale_y_continuous(\n    labels = scales::dollar_format(scale = 1e-3, suffix = \"K\"),\n    breaks = scales::pretty_breaks(n = 6)\n  ) +\n  scale_color_viridis_d(option = \"plasma\", begin = 0.1, end = 0.9) +\n  scale_fill_viridis_d(option = \"plasma\", begin = 0.1, end = 0.9) +\n  labs(\n    title = \"HDB Resale Price Trends Over Time\",\n    subtitle = \"Monthly median prices with interquartile ranges (ribbons) showing market volatility\",\n    x = \"Year-Month\",\n    y = \"Median Resale Price (S$)\",\n    color = \"Flat Type\",\n    fill = \"Flat Type\",\n    caption = \"Source: Team 16 Analysis of data.gov.sg\"\n  ) +\n  theme_minimal(base_size = 13) +\n  theme(\n    plot.title.position = \"plot\",\n    plot.title = element_text(face = \"bold\", size = 16),\n    plot.subtitle = element_text(color = \"grey40\", size = 11),\n    legend.position = \"bottom\",\n    legend.title = element_text(face = \"bold\"),\n    panel.grid.minor = element_blank(),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.margin = margin(20, 20, 20, 20)\n  ) +\n  guides(\n    color = guide_legend(override.aes = list(size = 3)),\n    fill = guide_legend(override.aes = list(alpha = 0.3))\n  )\n\n\n\n\n\n\n\n\n\n\n\nA modern scatter plot with trend lines and marginal distributions showing the relationship between floor height and price efficiency.\n\n# Prepare data for storey analysis\nstorey_analysis &lt;- project_data %&gt;%\n  filter(\n    flat_type %in% c(\"2 ROOM\", \"3 ROOM\", \"4 ROOM\", \"5 ROOM\", \"EXECUTIVE\"),\n    storey_mid &lt;= 50, # Remove extreme outliers\n    price_per_sqm &gt; 0 & price_per_sqm &lt; 15000 # Remove price outliers\n  ) %&gt;%\n  mutate(\n    flat_type_label = str_replace(flat_type, \" ROOM\", \"-Room\") %&gt;% str_to_title(),\n    storey_group = case_when(\n      storey_mid &lt;= 5 ~ \"Low (1-5)\",\n      storey_mid &lt;= 10 ~ \"Mid-Low (6-10)\",\n      storey_mid &lt;= 15 ~ \"Mid (11-15)\",\n      storey_mid &lt;= 20 ~ \"Mid-High (16-20)\",\n      TRUE ~ \"High (21+)\"\n    ),\n    storey_group = factor(storey_group, levels = c(\"Low (1-5)\", \"Mid-Low (6-10)\", \"Mid (11-15)\", \"Mid-High (16-20)\", \"High (21+)\"))\n  )\n\n# Create an enhanced box plot for clearer trend analysis\nggplot(storey_analysis, \n       aes(x = storey_group, y = price_per_sqm, fill = storey_group)) +\n  geom_boxplot(alpha = 0.8, outlier.shape = NA) + # Hiding outliers for clarity\n  scale_y_continuous(\n    labels = scales::dollar_format(prefix = \"S$\"),\n    limits = quantile(storey_analysis$price_per_sqm, c(0.01, 0.99), na.rm = TRUE) # Zoom in\n  ) +\n  scale_fill_viridis_d(option = \"cividis\", guide = \"none\") +\n  facet_wrap(~flat_type_label, scales = \"free_y\", ncol = 3) +\n  labs(\n    title = \"Price per Sqm Distribution by Storey Height\",\n    subtitle = \"Box plots clearly show increasing price efficiency with height, faceted by flat type\",\n    x = \"Storey Group\",\n    y = \"Price per Square Meter (S$)\",\n    caption = \"Source: Team 16 Analysis of data.gov.sg\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    plot.title.position = \"plot\",\n    plot.title = element_text(face = \"bold\", size = 16),\n    plot.subtitle = element_text(color = \"grey40\", size = 11),\n    panel.grid.minor = element_blank(),\n    strip.text = element_text(face = \"bold\", size = 11),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.margin = margin(20, 20, 20, 20)\n  )\n\n\n\n\n\n\n\n\n\n\n\nA modern horizontal bar chart showing median prices by town, with interactive tooltips when rendered in HTML.\n\n# Prepare town-wise analysis\ntown_analysis &lt;- project_data %&gt;%\n  group_by(town) %&gt;%\n  summarise(\n    median_price = median(resale_price, na.rm = TRUE),\n    median_psm = median(price_per_sqm, na.rm = TRUE),\n    transaction_count = n(),\n    .groups = \"drop\"\n  ) %&gt;%\n  filter(transaction_count &gt;= 50) %&gt;% # Only include towns with sufficient data\n  arrange(desc(median_price)) %&gt;%\n  mutate(\n    town_rank = row_number(),\n    price_category = case_when(\n      median_price &gt;= 600000 ~ \"Premium (≥S$600K)\",\n      median_price &gt;= 450000 ~ \"High (S$450K-600K)\",\n      median_price &gt;= 350000 ~ \"Mid (S$350K-450K)\",\n      TRUE ~ \"Affordable (&lt;S$350K)\"\n    ),\n    price_category = factor(price_category, levels = c(\"Premium (≥S$600K)\", \"High (S$450K-600K)\", \"Mid (S$350K-450K)\", \"Affordable (&lt;S$350K)\"))\n  ) %&gt;%\n  slice_head(n = 20) # Show top 20 towns\n\n# Step 1: Create the ggplot object with a 'text' aesthetic for the tooltip\np_towns &lt;- ggplot(town_analysis, \n                  aes(x = median_price, y = fct_reorder(town, median_price), fill = price_category,\n                      # Define the custom tooltip content here\n                      text = paste(\"Town:\", town, \n                                   \"\\nMedian Price:\", scales::dollar(median_price),\n                                   \"\\nMedian PSM:\", scales::dollar(median_psm),\n                                   \"\\nTransactions:\", transaction_count))) +\n  geom_col(alpha = 0.8, width = 0.7) +\n  scale_x_continuous(\n    labels = scales::dollar_format(scale = 1e-3, suffix = \"K\"),\n    expand = expansion(mult = c(0, 0.15)) # Make space for labels/tooltips\n  ) +\n  scale_fill_manual(values = c(\n    \"Premium (≥S$600K)\" = \"#E31A1C\",\n    \"High (S$450K-600K)\" = \"#FF7F00\", \n    \"Mid (S$350K-450K)\" = \"#1F78B4\",\n    \"Affordable (&lt;S$350K)\" = \"#33A02C\"\n  )) +\n  labs(\n    title = \"Interactive Top 20 HDB Towns by Median Resale Price\",\n    subtitle = \"Ranked by median price (2020-2024). Hover on bars for details.\",\n    x = \"Median Resale Price (S$)\",\n    y = NULL,\n    fill = \"Price Category\",\n    caption = \"Source: Team 16 Analysis of data.gov.sg\"\n  ) +\n  theme_minimal(base_size = 13) +\n  theme(\n    plot.title.position = \"plot\",\n    plot.title = element_text(face = \"bold\", size = 16),\n    plot.subtitle = element_text(color = \"grey40\", size = 11),\n    legend.position = \"bottom\",\n    panel.grid.major.y = element_blank(),\n    axis.text.y = element_text(face = \"bold\"),\n    plot.margin = margin(20, 20, 20, 20)\n  )\n\n# Step 2: Convert the ggplot object to an interactive plotly chart\nplotly::ggplotly(p_towns, tooltip = \"text\")\n\n\n\n\n\n\n\n\nThis multi-panel dashboard, built with the patchwork package, provides a powerful, at-a-glance summary of the HDB resale market, combining price trends, transaction volumes, and market share into a single, cohesive view.\n\n# Prepare summary statistics for the dashboard\nsummary_stats &lt;- project_data %&gt;%\n  filter(flat_type %in% c(\"2 ROOM\", \"3 ROOM\", \"4 ROOM\", \"5 ROOM\", \"EXECUTIVE\")) %&gt;%\n  mutate(flat_type_label = str_replace(flat_type, \" ROOM\", \"-Room\") %&gt;% str_to_title()) %&gt;%\n  group_by(flat_type_label, year) %&gt;%\n  summarise(\n    median_price = median(resale_price, na.rm = TRUE),\n    median_psm = median(price_per_sqm, na.rm = TRUE),\n    transaction_count = n(),\n    .groups = \"drop\"\n  )\n\n# Panel 1: Price evolution by year\np1 &lt;- ggplot(summary_stats, aes(x = year, y = median_price, color = flat_type_label)) +\n  geom_line(size = 1.2, alpha = 0.9) +\n  geom_point(size = 2) +\n  scale_x_continuous(breaks = 2020:2024) +\n  scale_y_continuous(labels = scales::dollar_format(scale = 1e-3, suffix = \"K\")) +\n  scale_color_viridis_d(option = \"plasma\", begin = 0.1, end = 0.9) +\n  labs(title = \"A. Price Evolution by Year\", x = NULL, y = \"Median Price\", color = \"Flat Type\") +\n  theme_minimal(base_size = 12) +\n  theme(plot.title = element_text(face = \"bold\"), legend.title = element_text(face=\"bold\"))\n\n# Panel 2: Transaction volume by year\np2 &lt;- ggplot(summary_stats, aes(x = year, y = transaction_count, fill = flat_type_label)) +\n  geom_col(position = \"stack\", alpha = 0.8) +\n  scale_x_continuous(breaks = 2020:2024) +\n  scale_y_continuous(labels = scales::comma) +\n  scale_fill_viridis_d(option = \"plasma\", begin = 0.1, end = 0.9) +\n  labs(title = \"B. Transaction Volume by Year\", x = NULL, y = \"Transactions\", fill = \"Flat Type\") +\n  theme_minimal(base_size = 12) +\n  theme(plot.title = element_text(face = \"bold\"), legend.title = element_text(face=\"bold\"))\n\n# Panel 3: Price per sqm comparison\np3 &lt;- ggplot(summary_stats %&gt;% filter(year %in% c(2020, 2024)), \n             aes(x = fct_reorder(flat_type_label, median_psm), y = median_psm, fill = factor(year))) +\n  geom_col(position = \"dodge\", alpha = 0.8) +\n  scale_y_continuous(labels = scales::dollar_format(prefix = \"S$\")) +\n  scale_fill_manual(values = c(\"2020\" = \"#440154FF\", \"2024\" = \"#FDE725FF\"), name = \"Year\") +\n  labs(title = \"C. Price per Sqm: 2020 vs 2024\", x = NULL, y = \"Median PSM\") +\n  theme_minimal(base_size = 12) +\n  theme(plot.title = element_text(face = \"bold\"), axis.text.x = element_text(angle=45, hjust=1), legend.title = element_text(face=\"bold\"))\n\n# Panel 4: Market share by flat type in the last full year\n# We use 2023 for a full year's data, as 2024 is incomplete.\nmarket_share &lt;- summary_stats %&gt;%\n  group_by(year) %&gt;%\n  mutate(market_share = transaction_count / sum(transaction_count)) %&gt;%\n  ungroup() %&gt;%\n  filter(year == 2023)\n\np4 &lt;- ggplot(market_share, aes(x = \"\", y = market_share, fill = fct_reorder(flat_type_label, market_share))) +\n  geom_col(width = 1, alpha = 0.8) +\n  coord_polar(\"y\", start = 0) +\n  geom_text(aes(label = scales::percent(market_share, accuracy = 1)), \n            position = position_stack(vjust = 0.5), color = \"white\", fontface = \"bold\") +\n  scale_fill_viridis_d(option = \"plasma\", begin = 0.1, end = 0.9, guide=\"none\") +\n  labs(title = \"D. Market Share by Flat Type (2023)\") +\n  theme_void(base_size = 12) +\n  theme(plot.title = element_text(face = \"bold\", hjust = 0.5))\n\n\n# --- FIX IS HERE ---\n# Combine all panels using patchwork.\n# We wrap the main plot composition in parentheses to ensure it's evaluated\n# fully before the `&` operator is applied. This resolves the precedence issue.\n(\n  (p1 + p2) / (p3 + p4) + \n    plot_annotation(\n      title = 'HDB Resale Market Dashboard (2020-2024)',\n      subtitle = 'An overview of price evolution, transaction volumes, price efficiency, and market share.',\n      caption = 'Source: Team 16 Analysis of data.gov.sg',\n      theme = theme(\n        plot.title = element_text(face = \"bold\", size = 22, hjust = 0.5),\n        plot.subtitle = element_text(size = 14, hjust = 0.5, color=\"grey40\"),\n        plot.caption = element_text(size=10, color=\"grey50\")\n      )\n    )\n) & \n  theme(legend.position = \"bottom\", legend.box = \"horizontal\")"
  }
]